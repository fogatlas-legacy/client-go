// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RelationshipPrices relationship prices
// swagger:model relationshipPrices
type RelationshipPrices struct {

	// bandwidth
	Bandwidth *Price `json:"bandwidth,omitempty"`

	// latency
	Latency *Price `json:"latency,omitempty"`
}

// Validate validates this relationship prices
func (m *RelationshipPrices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBandwidth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLatency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelationshipPrices) validateBandwidth(formats strfmt.Registry) error {

	if swag.IsZero(m.Bandwidth) { // not required
		return nil
	}

	if m.Bandwidth != nil {

		if err := m.Bandwidth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bandwidth")
			}
			return err
		}
	}

	return nil
}

func (m *RelationshipPrices) validateLatency(formats strfmt.Registry) error {

	if swag.IsZero(m.Latency) { // not required
		return nil
	}

	if m.Latency != nil {

		if err := m.Latency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RelationshipPrices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelationshipPrices) UnmarshalBinary(b []byte) error {
	var res RelationshipPrices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
