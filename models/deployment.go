// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Deployment deployment
// swagger:model Deployment
type Deployment struct {

	// dataflows
	Dataflows DeploymentDataflows `json:"dataflows,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// externalendpoint id
	ExternalendpointID string `json:"externalendpoint_id,omitempty"`

	// microservices
	Microservices DeploymentMicroservices `json:"microservices,omitempty"`

	// Unique FogAtlas internal name, defined by the user in a deployment request
	Name string `json:"name,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this deployment
func (m *Deployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deploymentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["todeploy","scheduled","deployed","failed","toundeploy","undeployed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTypeStatusPropEnum = append(deploymentTypeStatusPropEnum, v)
	}
}

const (
	// DeploymentStatusTodeploy captures enum value "todeploy"
	DeploymentStatusTodeploy string = "todeploy"
	// DeploymentStatusScheduled captures enum value "scheduled"
	DeploymentStatusScheduled string = "scheduled"
	// DeploymentStatusDeployed captures enum value "deployed"
	DeploymentStatusDeployed string = "deployed"
	// DeploymentStatusFailed captures enum value "failed"
	DeploymentStatusFailed string = "failed"
	// DeploymentStatusToundeploy captures enum value "toundeploy"
	DeploymentStatusToundeploy string = "toundeploy"
	// DeploymentStatusUndeployed captures enum value "undeployed"
	DeploymentStatusUndeployed string = "undeployed"
)

// prop value enum
func (m *Deployment) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deploymentTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Deployment) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Deployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Deployment) UnmarshalBinary(b []byte) error {
	var res Deployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
