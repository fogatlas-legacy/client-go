// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetThingsParams creates a new GetThingsParams object
// with the default values initialized.
func NewGetThingsParams() *GetThingsParams {
	var ()
	return &GetThingsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetThingsParamsWithTimeout creates a new GetThingsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetThingsParamsWithTimeout(timeout time.Duration) *GetThingsParams {
	var ()
	return &GetThingsParams{

		timeout: timeout,
	}
}

// NewGetThingsParamsWithContext creates a new GetThingsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetThingsParamsWithContext(ctx context.Context) *GetThingsParams {
	var ()
	return &GetThingsParams{

		Context: ctx,
	}
}

// NewGetThingsParamsWithHTTPClient creates a new GetThingsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetThingsParamsWithHTTPClient(client *http.Client) *GetThingsParams {
	var ()
	return &GetThingsParams{
		HTTPClient: client,
	}
}

/*GetThingsParams contains all the parameters to send to the API endpoint
for the get things operation typically these are written to a http.Request
*/
type GetThingsParams struct {

	/*RegionID
	  Returns things in the given region

	*/
	RegionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get things params
func (o *GetThingsParams) WithTimeout(timeout time.Duration) *GetThingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get things params
func (o *GetThingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get things params
func (o *GetThingsParams) WithContext(ctx context.Context) *GetThingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get things params
func (o *GetThingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get things params
func (o *GetThingsParams) WithHTTPClient(client *http.Client) *GetThingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get things params
func (o *GetThingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRegionID adds the regionID to the get things params
func (o *GetThingsParams) WithRegionID(regionID *string) *GetThingsParams {
	o.SetRegionID(regionID)
	return o
}

// SetRegionID adds the regionId to the get things params
func (o *GetThingsParams) SetRegionID(regionID *string) {
	o.RegionID = regionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetThingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RegionID != nil {

		// query param region_id
		var qrRegionID string
		if o.RegionID != nil {
			qrRegionID = *o.RegionID
		}
		qRegionID := qrRegionID
		if qRegionID != "" {
			if err := r.SetQueryParam("region_id", qRegionID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
