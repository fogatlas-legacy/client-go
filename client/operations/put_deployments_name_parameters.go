// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/fogatlas/client-go/models"
)

// NewPutDeploymentsNameParams creates a new PutDeploymentsNameParams object
// with the default values initialized.
func NewPutDeploymentsNameParams() *PutDeploymentsNameParams {
	var ()
	return &PutDeploymentsNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutDeploymentsNameParamsWithTimeout creates a new PutDeploymentsNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutDeploymentsNameParamsWithTimeout(timeout time.Duration) *PutDeploymentsNameParams {
	var ()
	return &PutDeploymentsNameParams{

		timeout: timeout,
	}
}

// NewPutDeploymentsNameParamsWithContext creates a new PutDeploymentsNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutDeploymentsNameParamsWithContext(ctx context.Context) *PutDeploymentsNameParams {
	var ()
	return &PutDeploymentsNameParams{

		Context: ctx,
	}
}

// NewPutDeploymentsNameParamsWithHTTPClient creates a new PutDeploymentsNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutDeploymentsNameParamsWithHTTPClient(client *http.Client) *PutDeploymentsNameParams {
	var ()
	return &PutDeploymentsNameParams{
		HTTPClient: client,
	}
}

/*PutDeploymentsNameParams contains all the parameters to send to the API endpoint
for the put deployments name operation typically these are written to a http.Request
*/
type PutDeploymentsNameParams struct {

	/*Deployment*/
	Deployment *models.Deployment
	/*Name*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put deployments name params
func (o *PutDeploymentsNameParams) WithTimeout(timeout time.Duration) *PutDeploymentsNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put deployments name params
func (o *PutDeploymentsNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put deployments name params
func (o *PutDeploymentsNameParams) WithContext(ctx context.Context) *PutDeploymentsNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put deployments name params
func (o *PutDeploymentsNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put deployments name params
func (o *PutDeploymentsNameParams) WithHTTPClient(client *http.Client) *PutDeploymentsNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put deployments name params
func (o *PutDeploymentsNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeployment adds the deployment to the put deployments name params
func (o *PutDeploymentsNameParams) WithDeployment(deployment *models.Deployment) *PutDeploymentsNameParams {
	o.SetDeployment(deployment)
	return o
}

// SetDeployment adds the deployment to the put deployments name params
func (o *PutDeploymentsNameParams) SetDeployment(deployment *models.Deployment) {
	o.Deployment = deployment
}

// WithName adds the name to the put deployments name params
func (o *PutDeploymentsNameParams) WithName(name string) *PutDeploymentsNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the put deployments name params
func (o *PutDeploymentsNameParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *PutDeploymentsNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Deployment != nil {
		if err := r.SetBodyParam(o.Deployment); err != nil {
			return err
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
